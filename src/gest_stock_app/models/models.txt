from django.db import models
import uuid
class Client(models.Model):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    type_client = models.IntegerField(default=0) # 1 client bar, 2 livreur
    nom = models.CharField(max_length=255)
    adresse = models.CharField(max_length=255)
    telephone = models.CharField(max_length=20)
    mail = models.EmailField(null=True, blank=True)
    date_creation = models.DateTimeField(auto_now_add=True)
    date_modification = models.DateTimeField(auto_now=True)
    is_deleted = models.BooleanField(default=False)


from django.db import models,transaction

from gest_stock_app.models.Fournisseur import Fournisseur
import uuid
import random
import string
class Commande(models.Model):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    code = models.CharField(max_length=20, unique=True, editable=False,blank=True,null=True)
    date = models.DateField()
    #total = models.DecimalField(max_digits=10, decimal_places=2)
    fournisseur = models.ForeignKey(Fournisseur, on_delete=models.CASCADE)
    frais_transport = models.DecimalField(max_digits=10, decimal_places=2, null=True, blank=True)
    date_creation = models.DateTimeField(auto_now_add=True)
    date_modification = models.DateTimeField(auto_now=True) 
    is_deleted = models.BooleanField(default=False)

    def save(self, *args, **kwargs):
        if not self.code:
            self.code = self.generate_order_code()
        super(Commande, self).save(*args, **kwargs)
    
    #transaction atomic pour suppression commande et detailCommande
    @transaction.atomic
    def delete(self ):
        if self.is_deleted is True:
            return
        self.is_deleted = True
        self.save()
        self.detailCommande.update(is_deleted=True)

    def generate_order_code(self):
        return f'CMD_{self.generate_random_string()}'

    def generate_random_string(self, length=8):
        """ Génère une chaîne alphanumérique aléatoire """
        characters = string.ascii_uppercase + string.digits
        return ''.join(random.choices(characters, k=length))

from django.db import models

from gest_stock_app.models.Client import Client
from gest_stock_app.models.TypeCasier import TypeCasier
import uuid
class Consignation(models.Model):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    libelle = models.CharField(max_length=255)
    type_casier = models.ForeignKey(TypeCasier, on_delete=models.CASCADE)
    type_consignation = models.IntegerField(default=0)
    type_garantie = models.IntegerField(default=0)
    qte_casier = models.IntegerField()
    qte_bouteille = models.IntegerField(null=True, blank=True)
    garantie = models.TextField()
    client = models.ForeignKey(Client, on_delete=models.CASCADE)
    date_creation = models.DateTimeField(auto_now_add=True)
    date_modification = models.DateTimeField(auto_now=True) 
    is_deleted = models.BooleanField(default=False)

from django.db import models

from gest_stock_app.models.Commande import Commande
from gest_stock_app.models.Produit import Produit
import uuid
class Defaut(models.Model):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    libelle = models.CharField(max_length=100)
    description = models.TextField()
    commande = models.ForeignKey(Commande, on_delete=models.CASCADE)
    Produit = models.ForeignKey(Produit, on_delete=models.CASCADE)
    nbre_bouteille = models.IntegerField()
    date_creation = models.DateTimeField(auto_now_add=True)
    date_modification = models.DateTimeField(auto_now=True) 
    is_deleted = models.BooleanField(default=False)



from django.db import models

from gest_stock_app.models.Commande import Commande
from gest_stock_app.models.Produit import Produit
#from gest_stock_app.models.TypeCasier import TypeCasier
import uuid

class DetailCommande(models.Model):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    commande = models.ForeignKey(Commande, on_delete=models.CASCADE,related_name='detailCommande')
    produit = models.ForeignKey(Produit, on_delete=models.CASCADE)
    #type_casier = models.ForeignKey(TypeCasier, on_delete=models.CASCADE)
    qte_casier = models.IntegerField()
    pu = models.DecimalField(max_digits=10, decimal_places=2) # pu casier
    date_creation = models.DateTimeField(auto_now_add=True)
    date_modification = models.DateTimeField(auto_now=True) 
    is_deleted = models.BooleanField(default=False)

from django.db import models

from gest_stock_app.models.Produit import Produit
#from gest_stock_app.models.TypeCasier import TypeCasier
from gest_stock_app.models.Vente import Vente
import uuid

class DetailVente(models.Model):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    vente = models.ForeignKey(Vente, on_delete=models.CASCADE,related_name="detailVente")
    produit = models.ForeignKey(Produit, on_delete=models.CASCADE)
    #type_casier = models.ForeignKey(TypeCasier, on_delete=models.CASCADE)
    qte_casier = models.DecimalField(default=0, max_digits=10, decimal_places=2)
    date_creation = models.DateTimeField(auto_now_add=True)
    date_modification = models.DateTimeField(auto_now=True) 
    is_deleted = models.BooleanField(default=False)

    
from django.db import models

from gest_stock_app.models.Vente import Vente
import uuid
class Facture(models.Model):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    reference = models.CharField(max_length=255)
    vente = models.ForeignKey(Vente, on_delete=models.CASCADE)
    file_path = models.FileField(upload_to='factures/')
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    is_deleted = models.BooleanField(default=False)

from django.db import models
import uuid
class Fournisseur(models.Model):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    nom = models.CharField(max_length=255)
    adresse = models.CharField(max_length=255)
    telephone = models.CharField(max_length=20)
    mail = models.EmailField(null=True, blank=True)
    date_creation = models.DateTimeField(auto_now_add=True)
    date_modification = models.DateTimeField(auto_now=True) 
    is_deleted = models.BooleanField(default=False)

from django.db import models
import uuid

from gest_stock_app.models.TypeCasier import TypeCasier
from gest_stock_app.models.Fournisseur import Fournisseur
class Produit(models.Model):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    type_casier = models.ForeignKey(TypeCasier, on_delete=models.CASCADE,blank=True,null=True)
    fournisseur = models.ForeignKey(Fournisseur, on_delete=models.CASCADE,blank=True,null=True)
    nom = models.CharField(max_length=255)
    qte_casier = models.DecimalField(default=0, max_digits=10, decimal_places=2)
    #volume = models.DecimalField(max_digits=5, decimal_places=2,null=True,blank=True)
    pu_casier = models.DecimalField(max_digits=10, decimal_places=2)
    pu_bouteille = models.DecimalField(max_digits=10, decimal_places=2,default=0)
    prix_achat_casier = models.DecimalField(max_digits=10, decimal_places=2, null=True, blank=True)
    date_creation = models.DateTimeField(auto_now_add=True)
    date_modification = models.DateTimeField(auto_now=True) 
    is_deleted = models.BooleanField(default=False)

from django.db import models
import uuid

class TypeCasier(models.Model):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    taille = models.PositiveIntegerField(default=0)
    #tauxReduction = models.DecimalField(max_digits=5, decimal_places=2,null=True,blank=True)
    date_creation = models.DateTimeField(auto_now_add=True)
    date_modification = models.DateTimeField(auto_now=True) 
    is_deleted = models.BooleanField(default=False)


from django.db import models,transaction
import uuid
import random
import string
from gest_stock_app.models.Client import Client

class Vente(models.Model):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    code = models.CharField(max_length=20, unique=True, null=True, blank=True, default="DEFAULT_CODE")
    type_vente = models.IntegerField(default=0) # 1 client bar, 2 livreur
    date = models.DateField()
    #total = models.DecimalField(max_digits=10, decimal_places=2)
    client = models.ForeignKey(Client, on_delete=models.SET_NULL, null=True,blank=True)
    date_creation = models.DateTimeField(auto_now_add=True)
    date_modification = models.DateTimeField(auto_now=True) 
    is_deleted = models.BooleanField(default=False)

    def save(self, *args, **kwargs):
        if not self.code:
            self.code = self.generate_order_code()
        super(Vente, self).save(*args, **kwargs)
    
    @transaction.atomic
    def delete(self ):
        if self.is_deleted is True:
            return
        self.is_deleted = True
        self.save()
        self.detailVente.update(is_deleted=True)

    def generate_order_code(self):
        return f'CMD_{self.generate_random_string()}'

    def generate_random_string(self, length=8):
        """ Génère une chaîne alphanumérique aléatoire """
        characters = string.ascii_uppercase + string.digits
        return ''.join(random.choices(characters, k=length))

from django.db import models
from django.contrib.auth.models import User  # Si vous voulez lier les modifications aux utilisateurs
from gest_stock_app.models import Produit

class HistoriqueStock(models.Model):
    produit = models.ForeignKey(Produit, on_delete=models.CASCADE)
    qte_change = models.IntegerField()  # Quantité ajoutée ou retirée
    mouvement_type = models.CharField(max_length=255)  # Type de mouvement (par ex. "commande", "vente")
    utilisateur = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, blank=True)
    date_mouvement = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"Produit: {self.produit.nom}, Changement: {self.qte_change}, Type: {self.mouvement_type}, Date: {self.date_mouvement}"
